// Code generated by MockGen. DO NOT EDIT.
// Source: ./store/CryptoStorageInterface.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	models "Golang-assignment-srikomm/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCryptoStorageInterface is a mock of CryptoStorageInterface interface.
type MockCryptoStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoStorageInterfaceMockRecorder
}

// MockCryptoStorageInterfaceMockRecorder is the mock recorder for MockCryptoStorageInterface.
type MockCryptoStorageInterfaceMockRecorder struct {
	mock *MockCryptoStorageInterface
}

// NewMockCryptoStorageInterface creates a new mock instance.
func NewMockCryptoStorageInterface(ctrl *gomock.Controller) *MockCryptoStorageInterface {
	mock := &MockCryptoStorageInterface{ctrl: ctrl}
	mock.recorder = &MockCryptoStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoStorageInterface) EXPECT() *MockCryptoStorageInterfaceMockRecorder {
	return m.recorder
}

// GetCryptoPrice mocks base method.
func (m *MockCryptoStorageInterface) GetCryptoPrice(ctx context.Context, cryptoIdentifier string) (models.Crypto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCryptoPrice", ctx, cryptoIdentifier)
	ret0, _ := ret[0].(models.Crypto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCryptoPrice indicates an expected call of GetCryptoPrice.
func (mr *MockCryptoStorageInterfaceMockRecorder) GetCryptoPrice(ctx, cryptoIdentifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCryptoPrice", reflect.TypeOf((*MockCryptoStorageInterface)(nil).GetCryptoPrice), ctx, cryptoIdentifier)
}

// SetCryptoPrice mocks base method.
func (m *MockCryptoStorageInterface) SetCryptoPrice(ctx context.Context, crypto models.Crypto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCryptoPrice", ctx, crypto)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCryptoPrice indicates an expected call of SetCryptoPrice.
func (mr *MockCryptoStorageInterfaceMockRecorder) SetCryptoPrice(ctx, crypto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCryptoPrice", reflect.TypeOf((*MockCryptoStorageInterface)(nil).SetCryptoPrice), ctx, crypto)
}
